*** DOM : Document Object Model
웹 페이지에 들어가있는 HTML elements를 트리 형태의 구조로 표현한 것

DOM tree 안에는 각각의 element에 상응하는 node가 들어있다.
개발자들은 DOM이 제공하는 API(ex. getElementById, querySelector 등)를 통해서 DOM 구조에 접근하고 element를 수정/변경 할 수 있다.


*** Virtual DOM
리액트는 가상 돔(Virtual DOM)을 사용해 실제 돔(DOM) 조작을 빠르고 효율적으로 처리한다.

가상 돔은 실제 돔과 같은 내용을 담고 있는 복사본으로, 실제 돔이 아닌 JS 객체 형태로 메모리 안에 저장돼 있다. 하지만 가상 돔은 실제 돔과는 다르게 브라우저에 있는 문서에 직접적으로 접근할 수 없다.

- 실제 돔에서 style 수정 시,
1. 브라우저가 html에서 수정할 element를 찾고
2. 해당 element와 그 자녀 element를 DOM에서 제거한 뒤
3. 새롭게 수정된 elements로 교체
4. CSS를 다시 계산하고 레이아웃 정보를 알맞게 수정
5. 새롭게 계산된 내용에 따라 화면을 다시 그림

- 가상 돔에서 style 수정 시,
우선 리액트는 항상 2개의 가상 돔을 갖고있다.
1. 랜더링 이전 화면 구조를 나타내는 가상 돔
2. 랜더링 이후에 보이게 될 화면 구조를 나타내는 가상 돔

변경된 내용이 화면에 새롭게 그려지기 전, 즉 실제 돔이 변경되기 이전에 리액트는 두 개의 가상 돔을 비교해서 정확히 어떤 부분이 바뀌었는지 효율적으로 비교/파악한다. 이 과정을 "Diffing"이라고 한다.

"Diffing"을 통해 변경된 부분들을 파악한 이후, 리액트는 "Batch Update"를 수행함으로 실제 DOM에 "한번에" 적용시켜준다. 이 과정을 "Reconsiliation(재조정)"이라고 한다.

이렇게 리액트는 가상 돔을 통해 가장 비용이 많이 드는 작업인 화면을 그려주는 작업을 훨씬 빠르고 효율적으로 처리할 수 있는 것이다.


*** 참고
https://www.youtube.com/watch?v=gc-kXt0tjTM&t=1s